#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR –∑ –º—ñ–Ω—ñ Python –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
"""

import requests
import json
import time
import os
from dotenv import load_dotenv

load_dotenv()

def wait_for_server(url="http://localhost:5000", max_attempts=30):
    """–ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è"""
    print("–ß–µ–∫–∞—î–º–æ –∑–∞–ø—É—Å–∫—É Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    
    for attempt in range(max_attempts):
        try:
            response = requests.get(f"{url}/api/status", timeout=2)
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π!")
                return True
        except requests.exceptions.RequestException:
            pass
        
        print(f"–°–ø—Ä–æ–±–∞ {attempt + 1}/{max_attempts}...")
        time.sleep(2)
    
    print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è –∑–∞ –≤—ñ–¥–≤–µ–¥–µ–Ω–∏–π —á–∞—Å")
    return False

def create_calculator_pr():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ PR –∑ Python –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π
    if not wait_for_server():
        print("–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ—é: python run.py")
        return
    
    # –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR
    pr_request = {
        "user_request": "–°—Ç–≤–æ—Ä–∏—Ç–∏ –º—ñ–Ω—ñ Python –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—ñ –∑ –±–∞–∑–æ–≤–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏ (+, -, *, /) —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º –º–µ–Ω—é",
        "repo_url": f"https://github.com/{os.getenv('GITHUB_OWNER')}/{os.getenv('GITHUB_REPO')}.git",
        "options": {
            "pr_title": "Add Python Mini Calculator",
            "pr_description": """# Python Mini Calculator

–î–æ–¥–∞–Ω–æ –ø—Ä–æ—Å—Ç–∏–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏:

## –§—É–Ω–∫—Ü—ñ—ó:
- ‚úÖ –ë–∞–∑–æ–≤—ñ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (+, -, *, /)
- ‚úÖ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –º–µ–Ω—é
- ‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ (–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å, –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥)
- ‚úÖ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏—Ö–æ–¥—É –∑ –ø—Ä–æ–≥—Ä–∞–º–∏
- ‚úÖ –ó—Ä—É—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å

## –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
```bash
python calculator.py
```

–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–ø–∏—Ç–∞—î –¥–≤–∞ —á–∏—Å–ª–∞ —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é, –≤–∏–∫–æ–Ω–∞—î –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç–∞ –ø–æ–∫–∞–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

---
*–°—Ç–≤–æ—Ä–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ AI Agent System*""",
            "base_branch": "main"
        }
    }
    
    print("üöÄ –°—Ç–≤–æ—Ä—é—î–º–æ PR –∑ Python –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º...")
    print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π: {pr_request['repo_url']}")
    print("-" * 50)
    
    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR
        response = requests.post(
            "http://localhost:5000/api/pr/create",
            headers={"Content-Type": "application/json"},
            json=pr_request,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ PR —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"Request ID: {result.get('request_id', 'N/A')}")
            
            if 'workflow_id' in result:
                print(f"Workflow ID: {result['workflow_id']}")
            
            if 'pr_url' in result:
                print(f"üîó PR URL: {result['pr_url']}")
            
            print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
            print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {result.get('message', 'N/A')}")
            
            # –Ø–∫—â–æ —î –¥–µ—Ç–∞–ª—ñ workflow
            if 'workflow_details' in result:
                details = result['workflow_details']
                print(f"–ù–∞–∑–≤–∞ –≥—ñ–ª–∫–∏: {details.get('branch_name', 'N/A')}")
                print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ PR: {details.get('pr_title', 'N/A')}")
            
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR: {response.status_code}")
            try:
                error_data = response.json()
                print(f"–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏: {error_data}")
            except:
                print(f"–¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏: {response.text}")
    
    except requests.exceptions.Timeout:
        print("‚ùå Timeout - –∑–∞–ø–∏—Ç –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É")
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π: python run.py")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

def check_pr_status(request_id):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å PR"""
    try:
        response = requests.get(f"http://localhost:5000/api/pr/status/{request_id}")
        if response.status_code == 200:
            result = response.json()
            print(f"–°—Ç–∞—Ç—É—Å PR: {result}")
        else:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {response.status_code}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É: {e}")

if __name__ == "__main__":
    print("üßÆ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PR –∑ Python –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º")
    print("=" * 50)
    
    create_calculator_pr()
    
    print("\n" + "=" * 50)
    print("–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ PR.")