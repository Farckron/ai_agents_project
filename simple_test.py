#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ - –ø–æ–∫—Ä–æ–∫–æ–≤–æ –ø–æ–∫–∞–∑—É—î —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è
"""

import requests
import json
import time

def test_step_by_step():
    """–ü–æ–∫—Ä–æ–∫–æ–≤–∏–π —Ç–µ—Å—Ç –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏"""
    
    print("üß™ –ü–û–ö–†–û–ö–û–í–ò–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò")
    print("=" * 50)
    
    base_url = "http://localhost:5000"
    
    # –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î
    print("\nüì° –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–≤–µ—Ä...")
    try:
        response = requests.get(f"{base_url}/api/status", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î!")
            data = response.json()
            print(f"   GitHub –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {data.get('github', {}).get('token_configured', False)}")
            print(f"   OpenAI –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {data.get('openai', {}).get('api_key_configured', False)}")
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–≤ –∑ –ø–æ–º–∏–ª–∫–æ—é: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        print("   –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: python main.py")
        return False
    
    # –ö—Ä–æ–∫ 2: –¢–µ—Å—Ç—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
    print("\nüîç –ö–†–û–ö 2: –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π...")
    try:
        repo_url = "https://github.com/Farckron/SimpleCalc"
        response = requests.get(
            f"{base_url}/api/repository/analyze",
            params={"repo_url": repo_url},
            timeout=30
        )
        
        if response.status_code == 200:
            print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
            data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            if 'repository_info' in data:
                print(f"   –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –¥–æ—Å—Ç—É–ø–Ω–∏–π: –¢–∞–∫")
        else:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {response.status_code}")
            print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:200]}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")
    
    # –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ñ–∞–π–ª (–±–µ–∑ PR)
    print("\nüìù –ö–†–û–ö 3: –¢–µ—Å—Ç—É—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—É...")
    try:
        request_data = {
            "request": "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —Ç–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó",
            "repo_url": "https://github.com/Farckron/SimpleCalc",
            "create_pr": False  # –ù–µ —Å—Ç–≤–æ—Ä—é—î–º–æ PR, —Ç—ñ–ª—å–∫–∏ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ
        }
        
        response = requests.post(
            f"{base_url}/api/process_request",
            headers={"Content-Type": "application/json"},
            json=request_data,
            timeout=60
        )
        
        if response.status_code == 200:
            print("‚úÖ –ó–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ!")
            data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            print(f"   –¢–∏–ø –æ–±—Ä–æ–±–∫–∏: {data.get('processing_type', 'unknown')}")
            
            if 'analysis' in data:
                analysis = data['analysis']
                print(f"   –ê–Ω–∞–ª—ñ–∑ –≤–∏–∫–æ–Ω–∞–Ω–æ: {analysis.get('status', 'unknown')}")
                if 'recommendations' in analysis:
                    recs = analysis['recommendations']
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {len(recs) if isinstance(recs, list) else 'N/A'}")
        else:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {response.status_code}")
            print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:300]}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
    
    # –ö—Ä–æ–∫ 4: –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç–∏–π PR
    print("\nüöÄ –ö–†–û–ö 4: –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π PR...")
    try:
        pr_data = {
            "user_request": "–î–æ–¥–∞–π —Ñ–∞–π–ª hello.py –∑ –ø—Ä–æ—Å—Ç–∏–º print('Hello, World!')",
            "repo_url": "https://github.com/Farckron/SimpleCalc.git",
            "options": {
                "pr_title": "Add hello.py file",
                "pr_description": "Simple hello world file for testing",
                "branch_name": "feature/hello-world"
            }
        }
        
        print("   –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR...")
        response = requests.post(
            f"{base_url}/api/pr/create",
            headers={"Content-Type": "application/json"},
            json=pr_data,
            timeout=120
        )
        
        print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ PR –∑–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ!")
            print(f"   Request ID: {data.get('request_id', 'N/A')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {data.get('message', 'N/A')}")
            
            if 'workflow_id' in data:
                print(f"   Workflow ID: {data['workflow_id']}")
            
            if data.get('status') == 'success' and 'pr_url' in data:
                print(f"üéâ PR —Å—Ç–≤–æ—Ä–µ–Ω–æ: {data['pr_url']}")
            elif data.get('status') == 'error':
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR: {data.get('message', 'Unknown error')}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ PR: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª—ñ: {error_data}")
            except:
                print(f"   Raw error: {response.text[:300]}")
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR: {e}")
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\n–©–æ –æ–∑–Ω–∞—á–∞—é—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    print("‚úÖ - –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚ö†Ô∏è  - –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏") 
    print("‚ùå - –§—É–Ω–∫—Ü—ñ—è –Ω–µ –ø—Ä–∞—Ü—é—î")
    print("\n–Ø–∫—â–æ PR —Å—Ç–≤–æ—Ä–µ–Ω–æ, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ:")
    print("https://github.com/Farckron/SimpleCalc/pulls")
    
    return True

if __name__ == "__main__":
    test_step_by_step()