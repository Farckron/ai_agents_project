#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR
"""

import requests
import json
import os
from dotenv import load_dotenv

load_dotenv()

def test_repository_analysis():
    """–¢–µ—Å—Ç—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é"""
    
    repo_url = f"https://github.com/{os.getenv('GITHUB_OWNER')}/{os.getenv('GITHUB_REPO')}"
    
    print("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é...")
    print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π: {repo_url}")
    print("-" * 50)
    
    try:
        response = requests.get(
            "http://localhost:5000/api/repository/analyze",
            params={"repo_url": repo_url},
            timeout=30
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —É—Å–ø—ñ—à–Ω–∏–π!")
            print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
            
            if 'analysis' in result:
                analysis = result['analysis']
                print(f"–ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç—É—Å: {analysis.get('status', 'unknown')}")
                if 'summary' in analysis:
                    print(f"–û–ø–∏—Å: {analysis['summary'][:200]}...")
            
            if 'repository_info' in result:
                repo_info = result['repository_info']
                print(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —ñ–Ω—Ñ–æ: {repo_info}")
                
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:")
            try:
                error_data = response.json()
                print(json.dumps(error_data, indent=2))
            except:
                print(f"Raw error: {response.text}")
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def test_simple_request():
    """–¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR"""
    
    print("\nüìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø–∏—Ç—É...")
    print("-" * 50)
    
    simple_request = {
        "request": "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü—å–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é —Ç–∞ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó",
        "repo_url": f"https://github.com/{os.getenv('GITHUB_OWNER')}/{os.getenv('GITHUB_REPO')}",
        "create_pr": False
    }
    
    try:
        response = requests.post(
            "http://localhost:5000/api/process_request",
            headers={"Content-Type": "application/json"},
            json=simple_request,
            timeout=60
        )
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            print(f"–°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
            print(f"–¢–∏–ø –æ–±—Ä–æ–±–∫–∏: {result.get('processing_type', 'unknown')}")
            print(f"–ó–º—ñ–Ω–∏ –≤–Ω–µ—Å–µ–Ω–æ: {result.get('changes_made', False)}")
            
            if 'analysis' in result:
                analysis = result['analysis']
                print(f"–ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ç—É—Å: {analysis.get('status', 'unknown')}")
                if 'analysis' in analysis:
                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É: {analysis['analysis'][:300]}...")
                    
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:")
            try:
                error_data = response.json()
                print(json.dumps(error_data, indent=2))
            except:
                print(f"Raw error: {response.text}")
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def create_local_calculator():
    """–°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
    
    print("\nüßÆ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞...")
    print("-" * 50)
    
    calculator_code = '''#!/usr/bin/env python3
"""
Simple Python Calculator
Created by AI Agent System
"""

def add(a, b):
    """Addition operation"""
    return a + b

def subtract(a, b):
    """Subtraction operation"""
    return a - b

def multiply(a, b):
    """Multiplication operation"""
    return a * b

def divide(a, b):
    """Division operation with zero check"""
    if b == 0:
        raise ValueError("Cannot divide by zero!")
    return a / b

def get_number(prompt):
    """Get a valid number from user input"""
    while True:
        try:
            return float(input(prompt))
        except ValueError:
            print("Please enter a valid number!")

def main():
    """Main calculator function"""
    print("üßÆ Python Calculator")
    print("=" * 30)
    
    while True:
        print("\\nOperations:")
        print("1. Addition (+)")
        print("2. Subtraction (-)")
        print("3. Multiplication (*)")
        print("4. Division (/)")
        print("5. Exit")
        
        choice = input("\\nSelect operation (1-5): ").strip()
        
        if choice == '5':
            print("Thank you for using the calculator!")
            break
        
        if choice not in ['1', '2', '3', '4']:
            print("Invalid choice! Please select 1-5.")
            continue
        
        try:
            num1 = get_number("Enter first number: ")
            num2 = get_number("Enter second number: ")
            
            if choice == '1':
                result = add(num1, num2)
                operation = "+"
            elif choice == '2':
                result = subtract(num1, num2)
                operation = "-"
            elif choice == '3':
                result = multiply(num1, num2)
                operation = "*"
            elif choice == '4':
                result = divide(num1, num2)
                operation = "/"
            
            print(f"\\n{num1} {operation} {num2} = {result}")
            
        except ValueError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")

if __name__ == "__main__":
    main()
'''
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ª–æ–∫–∞–ª—å–Ω–æ
    with open("calculator_demo.py", "w", encoding="utf-8") as f:
        f.write(calculator_code)
    
    print("‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: calculator_demo.py")
    print("–î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å: python calculator_demo.py")
    
    return calculator_code

if __name__ == "__main__":
    print("üß™ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ")
    print("=" * 60)
    
    test_repository_analysis()
    test_simple_request()
    calculator_code = create_local_calculator()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–°—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–æ–∂–Ω–∞ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ.")
    print("–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PR –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞–≥–æ–¥–∏—Ç–∏ GitHub Manager.")