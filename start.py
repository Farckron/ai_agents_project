#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É GitHub PR Automation System
"""

import os
import sys
import subprocess
import time

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'flask', 'requests', 'python-dotenv', 
        'PyGithub', 'openai', 'pytest'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—é –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏...")
        
        for package in missing_packages:
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
                print(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {package}")
            except subprocess.CalledProcessError:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏: {package}")
                return False
    
    print("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
    return True

def check_configuration():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        github_token = os.getenv('GITHUB_TOKEN')
        openai_key = os.getenv('OPENAI_API_KEY')
        
        if not github_token:
            print("‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ .env")
            return False
            
        if not openai_key:
            print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ (–¥–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏)")
        
        print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤ –ø–æ—Ä—è–¥–∫—É")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def run_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —à–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏"""
    print("üß™ –ó–∞–ø—É—Å–∫ —à–≤–∏–¥–∫–∏—Ö —Ç–µ—Å—Ç—ñ–≤...")
    
    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–∞–∑–æ–≤—ñ —Ç–µ—Å—Ç–∏
        result = subprocess.run([
            sys.executable, '-c', 
            """
from agents.pr_manager import PRManager
from agents.github_manager import GitHubManager
from utils.git_operations import GitOperations
print('[OK] All components import successfully')

pm = PRManager()
gm = GitHubManager()
go = GitOperations()
print('[OK] All components initialize successfully')

# Test basic functionality
branch_name = pm.generate_branch_name('test feature')
assert branch_name, 'Branch name should be generated'
print(f'[OK] Branch name generation works: {branch_name}')

is_valid, _ = go.validate_branch_name('valid-branch-name')
assert is_valid, 'Valid branch name should pass validation'
print('[OK] Branch name validation works')
            """
        ], capture_output=True, text=True, timeout=30, encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úÖ –ë–∞–∑–æ–≤—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–µ—Å—Ç–∏ –∑–∞–≤–∏—Å–ª–∏ (timeout)")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤: {e}")
        return False

def start_server():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Flask —Å–µ—Ä–≤–µ—Ä"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        os.environ['FLASK_APP'] = 'main.py'
        os.environ['FLASK_ENV'] = 'development'
        
        print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ http://localhost:5000")
        print("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
        print("-" * 50)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Flask
        subprocess.run([sys.executable, 'main.py'])
        
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def main():
    print("üöÄ GitHub PR Automation System - –ó–∞–ø—É—Å–∫\n")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if not check_dependencies():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    if not check_configuration():
        print("‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞")
        print("\n–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
        print("1. –°—Ç–≤–æ—Ä—ñ—Ç—å .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ .env.example")
        print("2. –î–æ–¥–∞–π—Ç–µ –≤–∞—à GitHub token")
        print("3. –î–æ–¥–∞–π—Ç–µ –≤–∞—à OpenAI API key (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)")
        return
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏
    if not run_tests():
        print("‚ùå –ë–∞–∑–æ–≤—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏")
        response = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–∞–ø—É—Å–∫? (y/N): ")
        if response.lower() != 'y':
            return
    
    print("\n" + "="*50)
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
    print("="*50)
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä
    start_server()

if __name__ == "__main__":
    main()