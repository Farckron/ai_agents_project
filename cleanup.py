#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
"""

import os
import shutil
import glob

def cleanup_cache():
    """–û—á–∏—Å—Ç–∏—Ç–∏ Python –∫–µ—à —Ñ–∞–π–ª–∏"""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è Python –∫–µ—à—É...")
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ __pycache__ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    for root, dirs, files in os.walk('.'):
        for dir_name in dirs:
            if dir_name == '__pycache__':
                cache_path = os.path.join(root, dir_name)
                print(f"  –í–∏–¥–∞–ª—è—é: {cache_path}")
                shutil.rmtree(cache_path, ignore_errors=True)
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ .pyc —Ñ–∞–π–ª–∏
    pyc_files = glob.glob('**/*.pyc', recursive=True)
    for pyc_file in pyc_files:
        print(f"  –í–∏–¥–∞–ª—è—é: {pyc_file}")
        os.remove(pyc_file)
    
    print("‚úÖ Python –∫–µ—à –æ—á–∏—â–µ–Ω–æ")

def cleanup_logs():
    """–û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–≥ —Ñ–∞–π–ª–∏"""
    print("Cleaning logs...")
    
    log_patterns = ['logs/*.log', '*.log', 'logs/*.txt']
    for pattern in log_patterns:
        log_files = glob.glob(pattern)
        for log_file in log_files:
            try:
                print(f"  Removing: {log_file}")
                os.remove(log_file)
            except PermissionError:
                print(f"  Skipping (file in use): {log_file}")
            except Exception as e:
                print(f"  Error removing {log_file}: {e}")
    
    print("Logs cleanup completed")

def cleanup_temp_files():
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏"""
    print("üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    
    temp_patterns = [
        '*.tmp', '*.temp', '.DS_Store', 'Thumbs.db',
        'test_integration.py', 'test_comprehensive.py'
    ]
    
    for pattern in temp_patterns:
        temp_files = glob.glob(pattern)
        for temp_file in temp_files:
            if os.path.exists(temp_file):
                print(f"  –í–∏–¥–∞–ª—è—é: {temp_file}")
                os.remove(temp_file)
    
    print("‚úÖ –¢–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –æ—á–∏—â–µ–Ω–æ")

def create_directories():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
    print("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π...")
    
    directories = ['logs', 'temp', 'uploads']
    for directory in directories:
        if not os.path.exists(directory):
            os.makedirs(directory)
            print(f"  –°—Ç–≤–æ—Ä–µ–Ω–æ: {directory}/")
    
    print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ")

def check_env_file():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å .env —Ñ–∞–π–ª—É"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
    
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("   –°—Ç–≤–æ—Ä—ñ—Ç—å .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ .env.example")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
    required_vars = ['GITHUB_TOKEN', 'OPENAI_API_KEY', 'SECRET_KEY']
    missing_vars = []
    
    try:
        with open('.env', 'r') as f:
            env_content = f.read()
            
        for var in required_vars:
            if f"{var}=" not in env_content or f"{var}=\n" in env_content or f"{var}=" == env_content.split(f"{var}=")[1].split('\n')[0]:
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ö†Ô∏è  –ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –≤ .env: {', '.join(missing_vars)}")
            return False
        
        print("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è .env –≤ –ø–æ—Ä—è–¥–∫—É")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è .env: {e}")
        return False

def main():
    print("üöÄ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ GitHub PR Automation System –¥–æ –∑–∞–ø—É—Å–∫—É\n")
    
    cleanup_cache()
    cleanup_logs()
    cleanup_temp_files()
    create_directories()
    
    print("\n" + "="*50)
    env_ok = check_env_file()
    
    if env_ok:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–ø—É—Å–∫—É!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫—É –≤–∏–∫–æ–Ω–∞–π—Ç–µ:")
        print("  python main.py")
        print("\n–ê–±–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
        print("  python -m pytest tests/ -v")
    else:
        print("\n‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        print("\n–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
        print("1. –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ .env —Ñ–∞–π–ª")
        print("2. –î–æ–¥–∞–π—Ç–µ –≤–∞—à GitHub token")
        print("3. –î–æ–¥–∞–π—Ç–µ –≤–∞—à OpenAI API key")
        print("4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å cleanup.py –∑–Ω–æ–≤—É")

if __name__ == "__main__":
    main()